`include "./src/struct_s.sv"
module nf_rule_reduction(
    input            clk,
    input            rst,
    input [511:0]    in_rule_data,
    input            in_rule_valid,
    input            in_rule_sop,
    input            in_rule_eop,
    input [5:0]      in_rule_empty,
    output logic     in_rule_ready,
    output logic [16*{{context['nf_out_rules']}}-1:0] out_rule_data,
    output logic     out_rule_valid,
    output logic     out_rule_sop,
    output logic     out_rule_eop,
    input            out_rule_ready
);

logic                                     rule_depacker_sop;
logic                                     rule_depacker_eop;
logic [{{context['nf_in_rules']*16-1}}:0] rule_depacker_data;
logic                                     rule_depacker_valid;
logic                                     rule_depacker_ready;


{% for i in range(0,context['nf_in_rules']) %}
rule_nf_t    rule_data_{{i}};
logic        rule_valid_{{i}};
logic        rule_ready_{{i}};
logic [31:0] rule_csr_readdata_{{i}};
logic        rule_almost_full_{{i}};
{% endfor %}

{% for i in range(0,context['nf_in_rules']) %}
{% for j in range(0,context['nf_rule_layer']) %}
rule_nf_t    int_data_{{i}}_{{j}};
logic        int_valid_{{i}}_{{j}};
logic        int_ready_{{i}}_{{j}};
{% endfor %}
{% endfor %}

{% for i in range(0,context['nf_out_rules']) %}
rule_nf_t    last_layer_data_{{i}};
logic        last_layer_valid_{{i}};
logic        last_layer_ready_{{i}};
{% endfor %}

logic enq;
logic all_last;
logic sync_ready;
logic sync_valid;
logic sync_sop;
logic sync_eop;
logic sync_almost_full;
logic [16*{{context['nf_out_rules']}}-1:0] sync_data;
logic [15:0] sync_cnt;


//Convert rule_depacker to individual rules
always@(posedge clk)begin
    if(rst)begin
{% for i in range(0,context['nf_in_rules']) %}
        rule_valid_{{i}} <= 1'b0;  
{% endfor %}
        rule_depacker_ready <= 1'b0;
    end else begin
{% for i in range(0,context['nf_in_rules']) %}
        rule_valid_{{i}} <= rule_depacker_valid & rule_depacker_ready & (rule_depacker_eop | (rule_depacker_data[16*{{i}}+RULE_AWIDTH-1:16*{{i}}]!=0));
{% endfor %}
        rule_depacker_ready <= {% for i in range(0,context['nf_in_rules']) %} !rule_almost_full_{{i}} & {% endfor %} 1;
    end
{% for i in range(0,context['nf_in_rules']) %}
    rule_data_{{i}}.last <= rule_depacker_eop;
    rule_data_{{i}}.data <= rule_depacker_data[16*{{i}}+RULE_AWIDTH-1:16*{{i}}];
{% endfor %}
end

assign sync_sop = (sync_cnt == 0) ? sync_valid : 1'b0;
assign all_last = {% for i in range(0,context['nf_out_rules']) %} last_layer_data_{{i}}.last & {% endfor %} 1;
assign enq = {% for i in range(0,context['nf_out_rules']) %} last_layer_valid_{{i}} & {% endfor %} !sync_almost_full;
 
{% for i in range(0,context['nf_out_rules']) %}
assign last_layer_ready_{{i}} = enq & (all_last | !last_layer_data_{{i}}.last);
{% endfor %}

//Sync output rules
always@(posedge clk)begin
    if(rst)begin
        sync_valid <= 1'b0;       
        sync_eop <= 1'b0;
        sync_cnt <= 0;
    end else begin
        sync_valid <= enq;
        sync_eop <= all_last;
        if(sync_valid)begin
            if(sync_eop)begin
                sync_cnt <= 0;
            end else begin
                sync_cnt <= sync_cnt + 1'b1;
            end
        end
    end
{% for i in range(0,context['nf_out_rules']) %}
    sync_data[16*{{i+1}}-1:16*{{i}}]  <= last_layer_data_{{i}}.data;
{% endfor %}
end 



//Depacker
{% if context['nf_in_rules']==8 %}
rule_depacker_512_128 rule_depacker_inst(
    .clk            (clk),
    .rst            (rst),
    .in_rule_data   (in_rule_data),
    .in_rule_valid  (in_rule_valid),
    .in_rule_ready  (in_rule_ready),
    .in_rule_sop    (in_rule_sop),
    .in_rule_eop    (in_rule_eop),
    .in_rule_empty  (in_rule_empty),
    .out_rule_data  (rule_depacker_data),
    .out_rule_valid (rule_depacker_valid),
    .out_rule_ready (rule_depacker_ready),
    .out_rule_sop   (rule_depacker_sop),
    .out_rule_eop   (rule_depacker_eop),
    .out_rule_empty ()
);
{% elif context['nf_in_rules']==16 %}
rule_depacker_512_256 rule_depacker_inst(
    .clk            (clk),
    .rst            (rst),
    .in_rule_data   (in_rule_data),
    .in_rule_valid  (in_rule_valid),
    .in_rule_ready  (in_rule_ready),
    .in_rule_sop    (in_rule_sop),
    .in_rule_eop    (in_rule_eop),
    .in_rule_empty  (in_rule_empty),
    .out_rule_data  (rule_depacker_data),
    .out_rule_valid (rule_depacker_valid),
    .out_rule_ready (rule_depacker_ready),
    .out_rule_sop   (rule_depacker_sop),
    .out_rule_eop   (rule_depacker_eop),
    .out_rule_empty ()
);
{% else %}
    assign rule_depacker_data  = in_rule_data;
    assign rule_depacker_valid = in_rule_valid;
    assign rule_depacker_sop   = in_rule_sop;
    assign rule_depacker_eop   = in_rule_eop;
    //assign rule_depacker_empty = in_rule_empty;
    assign in_rule_ready        = rule_depacker_ready;
{% endif %}


//input FIFOs
{% for i in range(0,context['nf_in_rules']) %}

unified_fifo  #(
    .FIFO_NAME        ("[non_fast_pattern] rule_FIFO_{{i}}"),
    .MEM_TYPE         ("MLAB"),
    .DUAL_CLOCK       (0),
    .USE_ALMOST_FULL  (1),
    .FULL_LEVEL       (24),
    .SYMBOLS_PER_BEAT (1),
    .BITS_PER_SYMBOL  (RULE_NF_WIDTH),
    .FIFO_DEPTH       (32)
) in_fifo_{{i}} (
    .in_clk            (clk),
    .in_reset          (rst),
    .out_clk           (),
    .out_reset         (),
    .in_data           (rule_data_{{i}}),
    .in_valid          (rule_valid_{{i}}),
    .in_ready          (rule_ready_{{i}}),
    .out_data          (int_data_{{i}}_0),
    .out_valid         (int_valid_{{i}}_0),
    .out_ready         (int_ready_{{i}}_0),
    .fill_level        (rule_csr_readdata_{{i}}),
    .almost_full       (rule_almost_full_{{i}}),
    .overflow          ()
);

{% endfor %}

//Reduction tree
{% for j in range(0,context['nf_rule_layer']) %}
{% if j==context['nf_rule_layer']-1 %}
    {% for i in range(0,context['nf_rule_layer_half'][j]) %}
    nf_reduction_2t1 reduction_unit_{{i}}_{{j}} (
        .clk          (clk), 
        .rst          (rst),
        .in_data_0    (int_data_{{2*i}}_{{j}}),
        .in_valid_0   (int_valid_{{2*i}}_{{j}}),
        .in_ready_0   (int_ready_{{2*i}}_{{j}}),
        .in_data_1    (int_data_{{2*i+1}}_{{j}}),
        .in_valid_1   (int_valid_{{2*i+1}}_{{j}}),
        .in_ready_1   (int_ready_{{2*i+1}}_{{j}}),
        .out_data     (last_layer_data_{{i}}),
        .out_valid    (last_layer_valid_{{i}}),
        .out_ready    (last_layer_ready_{{i}})
    );
    {% endfor %}
{% else %}
    {% for i in range(0,context['nf_rule_layer_half'][j]) %}
    nf_reduction_2t1 reduction_unit_{{i}}_{{j}} (
        .clk          (clk), 
        .rst          (rst),
        .in_data_0    (int_data_{{2*i}}_{{j}}),
        .in_valid_0   (int_valid_{{2*i}}_{{j}}),
        .in_ready_0   (int_ready_{{2*i}}_{{j}}),
        .in_data_1    (int_data_{{2*i+1}}_{{j}}),
        .in_valid_1   (int_valid_{{2*i+1}}_{{j}}),
        .in_ready_1   (int_ready_{{2*i+1}}_{{j}}),
        .out_data     (int_data_{{i}}_{{j+1}}),
        .out_valid    (int_valid_{{i}}_{{j+1}}),
        .out_ready    (int_ready_{{i}}_{{j+1}})
    );
    {% endfor %}
{% endif %}
{% endfor %}

//output fifo
unified_pkt_fifo  #(
    .FIFO_NAME        ("[non_fast_pattern] rule_FIFO"),
    .MEM_TYPE         ("M20K"),
    .DUAL_CLOCK       (0),
    .USE_ALMOST_FULL  (1),
    .FULL_LEVEL       (470),
    .SYMBOLS_PER_BEAT ({{context['nf_out_rules']}}),
    .BITS_PER_SYMBOL  (16),
    .FIFO_DEPTH       (512)
) output_rule_fifo (
    .in_clk            (clk),
    .in_reset          (rst),
    .out_clk           (),
    .out_reset         (),
    .in_data           (sync_data),
    .in_valid          (sync_valid),
    .in_ready          (sync_ready),
    .in_startofpacket  (sync_sop),
    .in_endofpacket    (sync_eop),
    .in_empty          (sync_empty),
    .out_data          (out_rule_data),
    .out_valid         (out_rule_valid),
    .out_ready         (out_rule_ready),
    .out_startofpacket (out_rule_sop),
    .out_endofpacket   (out_rule_eop),
    .out_empty         (),
    .fill_level        (sync_csr_readdata),
    .almost_full       (sync_almost_full),
    .overflow          ()
);


endmodule

